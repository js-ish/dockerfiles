#!/usr/bin/python3

import sys
import yaml
import os
import os.path
import subprocess
import argparse
import datetime


class Hub:
    def __init__(self, config=None) -> None:
        self.root = '/hubdata'
        self.datasets = []
        self.models = []
        self.ts = datetime.datetime.now().astimezone()

        git_user = os.getenv("GIT_USER", "ci")
        git_token = os.getenv("GIT_TOKEN", "")
        self.hub_url = f"https://{git_user}:{git_token}@gitlab.ish.org.cn"

        if config is not None:
            with open(config) as f:
                conf = yaml.safe_load(f.read())
                self.root = conf.get("hubroot", self.root)
                self.datasets = conf.get("datasets", [])
                self.models = conf.get("models", [])

    def htype_path(self, htype):
        return os.path.join(self.root, f"{htype}s")

    def name_path(self, htype, name):
        return os.path.join(self.htype_path(htype), name)

    def repo_url(self, repo):
        return f"{self.hub_url}/{repo}.git"

    def handle_download(self, args):
        os.makedirs(self.htype_path("dataset"), exist_ok=True)
        os.makedirs(self.htype_path("model"), exist_ok=True)
        if all([args.htype, args.name, args.repo]):
            return self.download_one(
                self.name_path(args.htype, args.name),
                self.repo_url(args.repo))
        for d in self.datasets:
            self.download_one(
                self.name_path("dataset", d['name']),
                self.repo_url(d['repo']))
        for m in self.models:
            self.download_one(
                self.name_path("model", m['name']),
                self.repo_url(m['repo']))

    def handle_upload(self, args):
        if all([args.htype, args.name]):
            return self.upload_one(self.name_path(args.htype, args.name))
        for d in self.datasets:
            self.upload_one(self.name_path("dataset", d["name"]))
        for m in self.models:
            self.upload_one(self.name_path("model", m["name"]))

    def download_one(self, name_path, repo_url):
        cmd = f"""rm -rf {name_path}; git clone {repo_url} {name_path}"""
        subprocess.run(["bash", "-c", cmd], check=True)

    def upload_one(self, name_path):
        cmd = f"""git checkout -b {self.ts.timestamp()}; \
            git add .; git commit -m"AutoCommit: {self.ts.isoformat()}"; \
            git push origin {self.ts.timestamp()}"""
        subprocess.run(["bash", "-c", cmd], check=True, cwd=name_path)


def build_argparser():
    parser = argparse.ArgumentParser(description='handle hubdata')
    parser.add_argument('-c', '--config', help='where config.yml located')
    subparsers = parser.add_subparsers(dest='cmd', help='sub-command help', required=True)
    parser_dl = subparsers.add_parser("download", help='download datasets or models')
    parser_dl.add_argument('-t', '--htype', choices=['dataset', 'model'], help='dataset or model')
    parser_dl.add_argument('-n', '--name', help='local name')
    parser_dl.add_argument('-p', '--repo', help='remote repo')
    parser_ul = subparsers.add_parser("upload", help='upload datasets or models')
    parser_ul.add_argument('-t', '--htype', choices=['dataset', 'model'], help='dataset or model')
    parser_ul.add_argument('-n', '--name', help='local name')
    return parser

if __name__ == '__main__':
    p = build_argparser()
    args = p.parse_args(sys.argv[1:])
    conf = args.config
    cmd = args.cmd

    hub = Hub(conf)
    h = getattr(hub, f"handle_{cmd}")
    h(args)
